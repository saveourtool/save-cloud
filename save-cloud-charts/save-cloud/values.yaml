imageRegistry: ghcr.io/saveourtool
# dockerTag: <TDB>  # this should be set explicitly during chart installation

env: staging
# Additional certs installation for internal CA case
initCerts:
  enabled: false
# Unless overridden, this will be set as Spring profile of a component.
profile: dev
pullPolicy: IfNotPresent
ingress:
  enabled: false
  https:
    enabled: false
backend:
  name: backend
  profile: dev,secure,kubernetes
  imageName: save-backend
  containerPort: 5800
  managementPort: 5801
  # Fixed ClusterIP can be assigned to make it easier to query backend from services outside Kubernetes.
  # Should be chosen depending on cluster's network configuration: https://kubernetes.io/docs/concepts/services-networking/service/#choosing-your-own-ip-address.
  clusterIP: null
  # Additional properties for `application.properties` file that will be mounted as an optional property source.
  applicationProperties:
backend_cosv:
  name: backend-cosv
  profile: dev,secure,kubernetes
  imageName: cosv-backend
  containerPort: 5700
  managementPort: 5701
  clusterIP: null
  # Additional properties for `application.properties` file that will be mounted as an optional property source.
  applicationProperties:
frontend:
  name: frontend
  imageName: save-frontend
  containerPort: 5810
frontend_cosv:
  name: frontend-cosv
  imageName: cosv-frontend
  containerPort: 5820
orchestrator:
  name: orchestrator
  imageName: save-orchestrator
  containerPort: 5100
  managementPort: 5101
  # Fixed ClusterIP can be assigned to make it easier to query orchestrator from services outside Kubernetes
  clusterIP: null
  dockerHost: tcp://${HOST_IP}:2375
  # Additional properties for `application.properties` file that will be mounted as an optional property source.
  applicationProperties:
preprocessor:
  name: preprocessor
  imageName: save-preprocessor
  containerPort: 5200
  managementPort: 5201
  # Fixed ClusterIP can be assigned to make it easier to query preprocessor from services outside Kubernetes
  clusterIP: null
  # Additional properties for `application.properties` file that will be mounted as an optional property source.
  applicationProperties:
gateway:
  name: gateway
  profile: dev,kubernetes
  imageName: api-gateway
  containerPort: 5300
  managementPort: 5301
  # Additional properties for `application.properties` file that will be mounted as an optional property source.
  applicationProperties:
  svc:
    annotations: {}
    # Any additional options for Service `spec` block
    spec: {}
storage:
  size: 24Gi
  annotations: {}
s3:
  secretFile: /home/cnb/secrets/s3_secrets
mysql:
  # Name of the database schema that will be used by save-cloud deployment
  backend_schema: save_cloud
  demo_schema: save_demo
  cosv_schema: cosv
  migrations:
    branch: {}
  dbPasswordFile: /home/cnb/secrets/db_secrets

# Values for dependencies
grafana:
  enabled: false
  image:
    repository: grafana/grafana
    tag: 9.4.3
  deploymentStrategy:
    # If we have a single replica of Grafana and PV doesn't support MultiAttach, then `RollingUpdate` will fail.
    type: Recreate
  service:
    port: 9100
  persistence:
    enabled: true
  rbac:
    create: false

prometheus:
  enabled: false
  alertmanager:
    enabled: false
  kube-state-metrics:
    enabled: false
  configmapReload:
    prometheus:
      enabled: false
  prometheus-node-exporter:
    enabled: false
  server:
    image:
      repository: quay.io/prometheus/prometheus
      tag: v2.42.0
    strategy:
      # If we have a single replica of Prometheus and PV doesn't support MultiAttach, then `RollingUpdate` will fail.
      type: Recreate
  prometheus-pushgateway:
    enabled: false

promtail:
  image:
    repository: grafana/promtail
    tag: 2.7.4
  podLabels:
    # This label will make promtail scrape itself according to the pipeeline stages below.
    io.kompose.service: promtail
  config:
    clients:
      - url: http://loki:3100/loki/api/v1/push
    snippets:
      pipelineStages:
        - cri: {}
        - output:
            source: output
        - labels:
            stream:
        - multiline:
            firstline: '^\d{2}:\d{2}:\d{2}\.\d{3} \[(?P<thread>[\w\d\-.]+)\] (?P<level>\w+)'
        - regex:
            expression: '^\d{2}:\d{2}:\d{2}\.\d{3} \[(?P<thread>[\w\d\-.]+)\] (?P<level>\w+)'
        - labels:
            level:
      extraRelabelConfigs:
        - action: keep
          regex: .*true.*
          source_labels:
            - __meta_kubernetes_pod_labelpresent_io_kompose_service
            - __meta_kubernetes_pod_labelpresent_executionId
loki:
  enabled: false
  # For compatibility with PV created in v2; see https://github.com/grafana/loki/issues/7267#issuecomment-1264472870
  # for a more comprehensive list.
  fullnameOverride: save-cloud-loki
  gateway:
    enabled: false
  ingress:
    # See https://github.com/grafana/loki/issues/7318
    paths:
      headless:
        - /
      read:
      write:
  loki:
    image:
      repository: grafana/loki
      tag: 2.7.4
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    structuredConfig:
      ingester:
        # https://grafana.com/docs/loki/latest/operations/storage/filesystem/
        max_chunk_age: 2h
        chunk_idle_period: 2h
    storage:
      type: 'filesystem'
    rulerConfig:
      storage:
        type: 'local'
  singleBinary:
    replicas: 1

neo4j:
  enabled: true
  browser:
    serviceName: http://save-cloud
    port: 7474
  ingress:
    enabled: false
  svc:
    annotations: {}
    # Any additional options for Service `spec` block
    spec: {}
  neo4j:
    edition: community
    name: simple-neo4j
    resources:
      cpu: "500m"
      memory: "2Gi"
  volumes:
    data:
      # REQUIRED: specify a volume mode to use for data
      # Valid values are share|selector|defaultStorageClass|volume|volumeClaimTemplate|dynamic
      # To get up-and-running quickly, for development or testing, use "defaultStorageClass" for a dynamically provisioned volume of the default storage class.
      mode: "volume"

      # Only used if mode is set to "volume"
      # Provide an explicit volume to use
      volume:
        # If set an init container (running as root) will be added that runs:
        #   `chown -R <securityContext.fsUser>:<securityContext.fsGroup>` AND `chmod -R g+rwx`
        # on the volume. This is useful for some filesystems (e.g. NFS) where Kubernetes fsUser or fsGroup settings are not respected
        setOwnerAndGroupWritableFilePermissions: false

        # Example (using a specific Persistent Volume Claim)
        persistentVolumeClaim:
          claimName: data-neo4j-0
demo_cpg:
  name: demo-cpg
  profile: dev
  imageName: save-demo-cpg
  containerPort: 5500
  managementPort: 5501
  clusterIP: null
  applicationProperties: |
    spring.neo4j.authentication.password={{ .Values.neo4j.neo4j.password }}
demo:
  name: demo
  profile: dev
  imageName: save-demo
  containerPort: 5421
  managementPort: 5422
  clusterIP: null
  agentSubdomainName: demo-agent-service
  agentPort: 23456
  # Additional properties for `application.properties` file that will be mounted as an optional property source.
  applicationProperties:

namespace: save-cloud
agentNamespace: save-agent

# optional proxy params
proxy:
  enabled: false
  extraEnv:
    - name: http_proxy
      value: {}
    - name: HTTPS_PROXY
      value: {}
    - name: NO_PROXY
      value: {}
  extraArgs: {}
