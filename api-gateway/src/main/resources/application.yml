server:
  port: 5300
  error:
    path: /error
gateway:
  backend:
    url: http://backend:5800
  backend-cosv:
    url: http://backend-cosv:5700
  frontend:
    url: http://frontend:5810
  frontend-cosv:
    url: http://frontend-cosv:5820
  demo:
    url: http://demo:5421
  demo-cpg:
    url: http://demo-cpg:5500

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,gateway
spring:
  profiles:
    default: dev
  cloud:
    gateway:
      routes:
        - id: demo-api_route
          uri: ${gateway.demo.url}
          predicates:
            - Path=/api/demo/**
          filters:
            # If SESSION cookie is passed to downstream, it is then removed, because downstream discards it
            - RemoveRequestHeader=Cookie
            - AuthorizationHeaders=
        - id: demo-cpg-api_route
          uri: ${gateway.demo-cpg.url}
          predicates:
            - Path=/api/cpg/**
          filters:
            # If SESSION cookie is passed to downstream, it is then removed, because downstream discards it
            - RemoveRequestHeader=Cookie
        - id: api_route
          uri: ${gateway.backend.url}
          predicates:
            - Host=**.${hosts.save}
            - Path=/api/**
          filters:
            # If SESSION cookie is passed to downstream, it is then removed, because downstream discards it
            - RemoveRequestHeader=Cookie
            - AuthorizationHeaders=
        - id: cosv_api_route
          uri: ${gateway.backend-cosv.url}
          predicates:
            - Host=**.${hosts.cosv}
            - Path=/api/**
          filters:
            # If SESSION cookie is passed to downstream, it is then removed, because downstream discards it
            - RemoveRequestHeader=Cookie
            - AuthorizationHeaders=
        - id: resource_route
          uri: ${gateway.frontend.url}
          predicates:
            - Host=**.${hosts.save}
            - Path=/*.html,/*.js*,/*.css,/img/**,/*.ico,/*.png
          filters:
            # If SESSION cookie is passed to downstream, it is then removed, because downstream discards it
            - RemoveRequestHeader=Cookie
        - id: index_route
          uri: ${gateway.frontend.url}/index.html
          predicates:
            - Host=**.${hosts.save}
            - Path=/**
          filters:
            # If SESSION cookie is passed to downstream, it is then removed, because downstream discards it
            - RemoveRequestHeader=Cookie
        - id: resource_route_cosv
          uri: ${gateway.frontend-cosv.url}
          predicates:
            - Host=**.${hosts.cosv}
            - Path=/*.html,/*.js*,/*.css,/img/**,/*.ico,/*.png
          filters:
            # If SESSION cookie is passed to downstream, it is then removed, because downstream discards it
            - RemoveRequestHeader=Cookie
        - id: index_route_cosv
          uri: ${gateway.frontend-cosv.url}/index.html
          predicates:
            - Host=**.${hosts.cosv}
            - Path=/**
          filters:
            # If SESSION cookie is passed to downstream, it is then removed, because downstream discards it
            - RemoveRequestHeader=Cookie

---
spring:
  config:
    activate:
      on-profile: kubernetes
---
spring:
  config:
    activate:
      on-profile: prod
  security:
    oauth2:
      client:
        provider:
            # we also have "google" provider, but its default implementation is good enough by for now
            # until we have fixed https://github.com/saveourtool/save-cloud/issues/2336
            # (now we use sub as a default user-name-attribute)
            # ===================
          huawei:
            authorization-uri: https://oauth-login.cloud.huawei.com/oauth2/v3/authorize
            token-uri: https://oauth-login.cloud.huawei.com/oauth2/v3/token
            jwk-set-uri: https://oauth-login.cloud.huawei.com/oauth2/v3/certs
            user-info-uri: https://account.cloud.huawei.com/rest.php?nsp_svc=GOpen.User.getInfo
            user-name-attribute: openID
            user-info-authentication-method: post
          gitee:
            authorization-uri: https://gitee.com/oauth/authorize
            token-uri: https://gitee.com/oauth/token
            user-info-uri: https://gitee.com/api/v5/user
            user-name-attribute: login
          github:
            # value that will work with GitHub API, where GitHub provides username as "login" in the response
            # https://docs.github.com/en/rest/reference/users#get-the-authenticated-user
            user-name-attribute: login
        registration:
          huawei:
            provider: huawei
            # hardcoded as for gitee
            redirect-uri: '{baseUrl}/login/oauth2/code/huawei'
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            # can be
            #  - openid (doesn't work due to invalid_nonce)
            #  - email (works but user allowed to not select to share an email)
            #  - profile
            scope: profile
          gitee:
            client-name: Gitee
            provider: gitee
            # it can be '${gateway.frontend.url}/{action}/oauth2/code/{registrationId}',
            # but for security reasons I would like to hardcode a domain name
            redirect-uri: '{baseUrl}/login/oauth2/code/gitee'
            authorization-grant-type: authorization_code
            scope:
              - user_info
---
# logout timeout
server:
  servlet:
    session:
      timeout: 15m
