[versions]
kotlin = "1.9.25"
jetbrains-annotations = "26.0.1"
save-cli = "0.3.10"
ktor = "3.0.1"
okio = "3.3.0"
serialization = "1.6.3"
kotlinx-datetime = "0.5.0"
kotlinx-coroutines = "1.8.1"
kotlin-wrappers = "1.0.0-pre.634"
spring-boot = "2.7.17"
spring-cloud = "3.1.9"
spring-cloud-kubernetes = "2.1.8"
kafka-client = "3.6.0"
junit = "5.10.1"
assertj = "3.24.2"
diktat = "2.0.0"
detekt = "1.23.3"
liquibase-core = "4.24.0"
docker-java = "3.3.4"
jgit = "7.0.0.202409031743-r"
mockito = "5.3.1"
mockito-kotlin = "5.0.0"
# only in save-cli
log4j = "2.21.1"
jpa = "1.0.2"
mySql = "8.0.33"
testcontainers = "1.19.1"
okhttp3 = "4.11.0"
reckon = "0.18.1"
commons-compress = "1.24.0"
zip4j = "2.11.5"
ktoml = "0.5.0"
springdoc = "1.7.0"
kotlinx-cli = "0.3.6"
spotless = "6.22.0"
fabric8 = "6.9.2"
arrow-kt = "1.2.1"
publish = "2.0.0"
cpg = "7.1.2"
# should be taken from cpg
cpg-neo4j-ogm = { strictly = "4.0.6" }
cpg-neo4j-java-driver = { strictly = "5.7.0" }
aws-sdk = "2.21.16"
cosv4k = "0.0.14"

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-js = { id = "org.jetbrains.kotlin.js", version.ref = "kotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-plugin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-plugin-jpa = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }
kotlin-plugin-allopen = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin" }
talaiot-base = { id = "io.github.cdsap.talaiot.plugin.base", version = "2.0.3" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
spotless = { id = "com.diffplug.gradle.spotless", version.ref = "spotless" }

[libraries]
save-common = { module = "com.saveourtool.save:save-common", version.ref = "save-cli" }
save-common-jvm = { module = "com.saveourtool.save:save-common-jvm", version.ref = "save-cli" }
save-core = { module = "com.saveourtool.save:save-core", version.ref = "save-cli" }
save-core-jvm = { module = "com.saveourtool.save:save-core-jvm", version.ref = "save-cli" }
save-plugins-fix = { module = "com.saveourtool.save:fix-plugin", version.ref = "save-cli" }
save-plugins-fix-jvm = { module = "com.saveourtool.save:fix-plugin-jvm", version.ref = "save-cli" }
save-plugins-warn-jvm = { module = "com.saveourtool.save:warn-plugin-jvm", version.ref = "save-cli" }
save-plugins-fixAndWarn-jvm = { module = "com.saveourtool.save:fix-and-warn-plugin-jvm", version.ref = "save-cli" }
save-reporters = { module = "com.saveourtool.save:save-reporters", version.ref = "save-cli" }
publish-gradle-plugin = { module = "io.github.gradle-nexus:publish-plugin", version.ref = "publish"}

kotlin-gradle-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlin-plugin-serialization = { module = "org.jetbrains.kotlin:kotlin-serialization", version.ref = "kotlin" }
kotlin-plugin-allopen = { module = "org.jetbrains.kotlin:kotlin-allopen", version.ref = "kotlin" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-wrappers-bom = { module = "org.jetbrains.kotlin-wrappers:kotlin-wrappers-bom", version.ref = "kotlin-wrappers" }

kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "serialization" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }
kotlinx-serialization-json-jvm = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm", version.ref = "serialization" }
kotlinx-serialization-properties = { module = "org.jetbrains.kotlinx:kotlinx-serialization-properties", version.ref = "serialization" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-core-linuxx64 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-linuxx64", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
jetbrains-annotations = { module = "org.jetbrains:annotations", version.ref = "jetbrains-annotations" }
ktoml-core = { module = "com.akuleshov7:ktoml-core", version.ref = "ktoml" }
ktoml-source = { module = "com.akuleshov7:ktoml-source", version.ref = "ktoml" }
ktoml-file = { module = "com.akuleshov7:ktoml-file", version.ref = "ktoml" }

spring-boot-dependencies = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "spring-boot" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-starter-quartz = { module = "org.springframework.boot:spring-boot-starter-quartz" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot = { module = "org.springframework.boot:spring-boot" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring-boot" }
spring-security-core = { module = "org.springframework.security:spring-security-core" }
spring-security-oauth2-client = { module = "org.springframework.security:spring-security-oauth2-client" }
spring-security-test = { module = "org.springframework.security:spring-security-test" }
spring-boot-gradle-plugin = { module = "org.springframework.boot:spring-boot-gradle-plugin", version.ref = "spring-boot" }
spring-cloud-starter-gateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway", version.ref = "spring-cloud" }
spring-cloud-starter-kubernetes-client-config = { module = "org.springframework.cloud:spring-cloud-starter-kubernetes-client-config", version.ref = "spring-cloud-kubernetes" }
spring-boot-starter-oauth2-client = { module = "org.springframework.boot:spring-boot-starter-oauth2-client" }
spring-data-jpa = { module = "org.springframework.data:spring-data-jpa" }
spring-kafka = { module = "org.springframework.kafka:spring-kafka" }
spring-kafka-test = { module = "org.springframework.kafka:spring-kafka-test" }
spring-web = { module = "org.springframework:spring-web" }
spring-webflux = { module = "org.springframework:spring-webflux" }
spring-jdbc-starter = { module = "org.springframework.boot:spring-boot-starter-data-jdbc" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }

kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka-client" }
kafka212 = { module = "org.apache.kafka:kafka_2.12", version.ref = "kafka-client" }

springdoc-openapi-ui = { module = "org.springdoc:springdoc-openapi-ui", version.ref = "springdoc" }
springdoc-openapi-webflux-ui = { module = "org.springdoc:springdoc-openapi-webflux-ui", version.ref = "springdoc" }
springdoc-openapi-security = { module = "org.springdoc:springdoc-openapi-security", version.ref = "springdoc" }
springdoc-openapi-kotlin = { module = "org.springdoc:springdoc-openapi-kotlin", version.ref = "springdoc" }
swagger-annotations = { module = "io.swagger.core.v3:swagger-annotations", version = "2.2.18" }

ktor-client-apache = { module = "io.ktor:ktor-client-apache", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-curl = { module = "io.ktor:ktor-client-curl", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-serialization = { module = "io.ktor:ktor-client-serialization", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-http = { module = "io.ktor:ktor-http", version.ref = "ktor" }

ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-cio = { module = "io.ktor:ktor-server-cio", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }

# java core libraries
validation-api = { module = "jakarta.validation:jakarta.validation-api"}
annotation-api = { module = "jakarta.annotation:jakarta.annotation-api"}

# database
hibernate-jpa21-api = { module = "org.hibernate.javax.persistence:hibernate-jpa-2.1-api", version.ref = "jpa" }
hibernate-core = { module = "org.hibernate:hibernate-core" }
hibernate-micrometer = { module = "org.hibernate:hibernate-micrometer" }
liquibase-core = { module = "org.liquibase:liquibase-core", version.ref = "liquibase-core" }
mysql-connector-java = { module = "mysql:mysql-connector-java", version.ref = "mySql" }

# graph utilities
cpg-core = { module = "de.fraunhofer.aisec:cpg-core", version.ref = "cpg" }
cpg-cxx = { module = "de.fraunhofer.aisec:cpg-language-cxx", version.ref = "cpg" }
cpg-java = { module = "de.fraunhofer.aisec:cpg-language-java", version.ref = "cpg" }
cpg-python = { module = "de.fraunhofer.aisec:cpg-language-python", version.ref = "cpg" }
cpg-typescript = { module = "de.fraunhofer.aisec:cpg-language-typescript", version.ref = "cpg" }
neo4j-ogm-core = { module = "org.neo4j:neo4j-ogm-core", version.ref = "cpg-neo4j-ogm"}
neo4j-ogm-bolt-driver = { module = "org.neo4j:neo4j-ogm-bolt-driver", version.ref = "cpg-neo4j-ogm"}
neo4j-java-driver = { module = "org.neo4j.driver:neo4j-java-driver", version.ref = "cpg-neo4j-java-driver" }

# testing
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-mysql = { module = "org.testcontainers:mysql", version.ref = "testcontainers" }
testcontainers-junit-jupiter = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp3" }
okhttp-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp3" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito-kotlin" }
mockito-junit-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version = "5.6.2" }

okio = { module = "com.squareup.okio:okio", version.ref = "okio" }
slf4j-api = { module = "org.slf4j:slf4j-api" }
log4j = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }
log4j-slf4j-impl = { module = "org.apache.logging.log4j:log4j-slf4j-impl", version.ref = "log4j" }
logback-core = { module = "ch.qos.logback:logback-core" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
assertj-core = { module = "org.assertj:assertj-core", version.ref = "assertj" }
dockerJava-core = { module = "com.github.docker-java:docker-java-core", version.ref = "docker-java" }
dockerJava-transport-httpclient5 = { module = "com.github.docker-java:docker-java-transport-httpclient5", version.ref = "docker-java" }
jgit = { module = "org.eclipse.jgit:org.eclipse.jgit", version.ref = "jgit" }
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }
diktat-gradle-plugin = { module = "com.saveourtool.diktat:diktat-gradle-plugin", version.ref = "diktat" }
detekt-gradle-plugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
reckon-gradle-plugin = { module = "org.ajoberstar.reckon:reckon-gradle", version.ref = "reckon" }
commons-compress = { module = "org.apache.commons:commons-compress", version.ref = "commons-compress" }
zip4j = { module = "net.lingala.zip4j:zip4j", version.ref = "zip4j" }
kotlinx-cli = { module = "org.jetbrains.kotlinx:kotlinx-cli", version.ref = "kotlinx-cli" }
gradle-plugin-spotless = { module = "com.diffplug.spotless:spotless-plugin-gradle", version.ref = "spotless" }
reactor-kotlin-extensions = { module = "io.projectreactor.kotlin:reactor-kotlin-extensions" }
reactor-extra = { module = "io.projectreactor.addons:reactor-extra" }

fabric8-kubernetes-client = { module = "io.fabric8:kubernetes-client", version.ref = "fabric8" }
fabric8-kubernetes-server-mock = { module = "io.fabric8:kubernetes-server-mock", version.ref = "fabric8" }

arrow-kt-core = { module = "io.arrow-kt:arrow-core", version.ref = "arrow-kt"}

# aws s3 sdk
aws-sdk-bom = { module = "software.amazon.awssdk:bom", version.ref = "aws-sdk" }
aws-sdk-s3 = { module = "software.amazon.awssdk:s3" }
aws-sdk-netty-nio = { module = "software.amazon.awssdk:netty-nio-client" }

# vulnerability
cosv4k = { module = "com.saveourtool.cosv4k:cosv4k", version.ref = "cosv4k" }
